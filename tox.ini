[tox]
min_version = 4.0
requires =
    tox-pypi-filter>=0.14
envlist =
    py{310,311,312}
    py312-devdeps
    py310-oldestdeps
    codestyle
    build_docs

[testenv]
# We use bash in some of our environments so we have to whitelist it.
allowlist_externals=
    /bin/bash
    /usr/bin/bash
pypi_filter = https://raw.githubusercontent.com/sunpy/sunpy/main/.test_package_pins.txt
# Run the tests in a temporary directory to make sure that we don't import
# the package from the source tree
change_dir = .tmp/{envname}
description =
    run tests
    oldestdeps: with the oldest supported version of key dependencies
    devdeps: with the latest developer version of key dependencies
    online: that require remote data (as well as the offline ones)
    figure: runs the figure test suite.
pass_env =
    # A variable to tell tests we are on a CI system
    CI
    # Custom compiler locations (such as ccache)
    CC
    # Location of locales (needed by sphinx on some systems)
    LOCALE_ARCHIVE
    # If the user has set a LC override we should follow it
    LC_ALL
set_env =
    MPLBACKEND = agg
    COLUMNS = 180
    PYTEST_COMMAND = pytest -vvv -r fEs --pyargs ndcube --cov-report=xml --cov=ndcube --cov-config={toxinidir}/.coveragerc {toxinidir}/docs
    PARFIVE_HIDE_PROGESS = True
    devdeps: PIP_EXTRA_INDEX_URL = https://pypi.anaconda.org/astropy/simple https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
deps =
    # The devdeps factor is intended to be used to install the latest developer version.
    # of key dependencies.
    # Astropy is installed from the nightly wheels
    devdeps: astropy>=0.0dev0
    devdeps: matplotlib>=0.0dev0
    devdeps: git+https://github.com/sunpy/sunpy
    devdeps: git+https://github.com/sunpy/mpl-animators
    devdeps: git+https://github.com/spacetelescope/gwcs
    devdeps: numpy>=0.0.dev0
    # These are specific online extras we use to run the online tests.
    online: pytest-rerunfailures
    online: pytest-timeout
    # Oldest Dependencies
    oldestdeps: minimum_dependencies
    # Figure tests need a tightly controlled environment
    figure-!devdeps: astropy==6.0.0
    figure-!devdeps: dask
    figure-!devdeps: matplotlib==3.8.2
    figure-!devdeps: mpl-animators==1.1.1
    figure-!devdeps: scipy
# The following indicates which extras_require will be installed
extras =
    plotting
    reproject
    tests
commands_pre =
    oldestdeps: minimum_dependencies ndcube --filename requirements-min.txt
    oldestdeps: pip install -r requirements-min.txt
    oldestdeps: python -c "import astropy.time; astropy.time.update_leap_seconds()"
    pip freeze --all --no-input
commands =
    figure: /bin/bash -c "mkdir -p ./figure_test_images; python -c 'import matplotlib as mpl; print(mpl.ft2font.__file__, mpl.ft2font.__freetype_version__, mpl.ft2font.__freetype_build_type__)' > ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "pip freeze >> ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "cat ./figure_test_images/figure_version_info.txt"
    figure: python -c "import ndcube.tests.helpers as h; print(h.get_hash_library_name())"
    # To amend the pytest command for different factors you can add a line
    # which starts with a factor like `online: --remote-data=any \`
    # If you have no factors which require different commands this is all you need:
    pytest \
    -vvv \
    -r fEs \
    --pyargs ndcube \
    --cov-report=xml \
    --cov=ndcube \
    --cov-config={toxinidir}/.coveragerc \
    online: --remote-data=any \
    figure: -m "mpl_image_compare" \
    figure: --mpl \
    figure: --remote-data=any \
    figure: --mpl-generate-summary=html \
    figure: --mpl-baseline-path=https://raw.githubusercontent.com/sunpy/sunpy-figure-tests/ndcube-main/figures/{envname}/ \
    {toxinidir}/docs \
    {posargs}

[testenv:build_docs]
change_dir = docs
description = Invoke sphinx-build to build the HTML docs
extras =
    plotting
    reproject
    docs
commands =
    pip freeze --all --no-input
    sphinx-build --color -W --keep-going -b html -d _build/.doctrees . _build/html {posargs}
    python -c 'import pathlib; print("Documentation available under file://\{0\}".format(pathlib.Path(r"{toxinidir}") / "docs" / "_build" / "index.html"))'

[testenv:codestyle]
pypi_filter =
skip_install = true
description = Run all style and file checks with pre-commit
deps =
    pre-commit
commands =
    pre-commit install-hooks
    pre-commit run --color always --all-files --show-diff-on-failure
